// <auto-generated />
using System;
using Atlas.MatchingAlgorithm.Data.Persistent.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atlas.MatchingAlgorithm.Data.Persistent.Migrations
{
    [DbContext(typeof(SearchAlgorithmPersistentContext))]
    [Migration("20231212191758_UpdateMatchGradesTable")]
    partial class UpdateMatchGradesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MatchingAlgorithmPersistent")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Atlas.MatchingAlgorithm.Data.Persistent.Models.DataRefreshRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DataDeletionCompleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatabaseScalingSetupCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatabaseScalingTearDownCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DonorHlaProcessingCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DonorImportCompleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("HlaNomenclatureVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IndexDeletionCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IndexRecreationCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastSafelyProcessedDonor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MetadataDictionaryRefreshCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("QueuedDonorUpdatesCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefreshAttemptedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RefreshEndUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RefreshLastContinuedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RefreshRequestedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShouldMarkAllDonorsAsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("SupportComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DataRefreshHistory", "MatchingAlgorithmPersistent");
                });

            modelBuilder.Entity("Atlas.MatchingAlgorithm.Data.Persistent.Models.ScoringWeightings.ConfidenceWeighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ConfidenceWeightings", "MatchingAlgorithmPersistent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mismatch",
                            Weight = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Potential",
                            Weight = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Exact",
                            Weight = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Definite",
                            Weight = 0
                        });
                });

            modelBuilder.Entity("Atlas.MatchingAlgorithm.Data.Persistent.Models.ScoringWeightings.GradeWeighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("GradeWeightings", "MatchingAlgorithmPersistent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mismatch",
                            Weight = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Broad",
                            Weight = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Split",
                            Weight = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Associated",
                            Weight = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "NullMismatch",
                            Weight = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "NullPartial",
                            Weight = 0
                        },
                        new
                        {
                            Id = 7,
                            Name = "NullCDna",
                            Weight = 0
                        },
                        new
                        {
                            Id = 8,
                            Name = "NullGDna",
                            Weight = 0
                        },
                        new
                        {
                            Id = 9,
                            Name = "PGroup",
                            Weight = 0
                        },
                        new
                        {
                            Id = 10,
                            Name = "GGroup",
                            Weight = 0
                        },
                        new
                        {
                            Id = 11,
                            Name = "Protein",
                            Weight = 0
                        },
                        new
                        {
                            Id = 12,
                            Name = "CDna",
                            Weight = 0
                        },
                        new
                        {
                            Id = 13,
                            Name = "GDna",
                            Weight = 0
                        },
                        new
                        {
                            Id = 14,
                            Name = "Unknown",
                            Weight = 0
                        },
                        new
                        {
                            Id = 15,
                            Name = "ExpressingVsNull",
                            Weight = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
