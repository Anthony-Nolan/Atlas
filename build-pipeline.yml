trigger:
  - master

variables:
  - group: Terraform

pr: none

jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '6.0.x'
      - task: DotNetCoreCLI@2
        displayName: Install dotnet-ef
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'install --global dotnet-ef'
      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
      - task: DotNetCoreCLI@2
        displayName: 'Build Projects'
        inputs:
          command: 'build'
          projects: |
            Atlas.Client.Models
            Atlas.Functions
            Atlas.Functions.PublicApi
            Atlas.DonorImport.Data
            Atlas.DonorImport.Functions
            Atlas.MatchingAlgorithm.Functions
            Atlas.MatchingAlgorithm.Functions.DonorManagement
            Atlas.MatchingAlgorithm.Test
            Atlas.MatchingAlgorithm.Data
            Atlas.MatchingAlgorithm.Data.Persistent
            Atlas.MatchPrediction.Data
            Atlas.MatchPrediction.Test
            Atlas.MatchPrediction.Functions
            Atlas.RepeatSearch.Data
            Atlas.RepeatSearch.Test
            Atlas.RepeatSearch.Functions
          arguments: '--configuration Release --no-restore'
      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Tests'
        inputs:
          command: 'test'
          projects: '**/*Test.csproj'
          arguments: '--no-restore'

      - task: DotNetCoreCLI@2
        displayName: 'Prepare Client Models'
        inputs:
          command: pack
          packagesToPack: '**/Atlas.Client.Models.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/client-models'
          nobuild: true
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Client Models'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/client-models'
          ArtifactName: client-models
        # Inline version bump of client project to add "-ci", to allow for a prerelease ci (continuous integration) package to be published  
      - bash: sed -i 's/<\/VersionPrefix>/-ci-$(Build.BuildId)<\/VersionPrefix>/g' **/Atlas.Client.Models.csproj
        displayName: Update Prerelease Client Models version
      - bash: dotnet pack **/Atlas.Client.Models.csproj --output $(Build.ArtifactStagingDirectory)/client-models-ci --no-build
        displayName: Pack Prerelease Client Models
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Client Models-CI'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/client-models-ci'
          ArtifactName: client-models-ci

      - task: CopyFiles@2
        displayName: 'Copy Atlas Functions Build'
        inputs:
          SourceFolder: 'Atlas.Functions'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'atlasFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive Atlas Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/atlasFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/AtlasFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Atlas Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/AtlasFunctions-$(Build.BuildId).zip'
          ArtifactName: functions

      - task: CopyFiles@2
        displayName: 'Copy Atlas Public Api Functions Build'
        inputs:
          SourceFolder: 'Atlas.Functions.PublicApi'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'atlasPublicApiBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive Atlas Public Api Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/atlasPublicApiBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/AtlasPublicApiFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Atlas Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/AtlasPublicApiFunctions-$(Build.BuildId).zip'
          ArtifactName: functions

      - task: CopyFiles@2
        displayName: 'Copy MatchingAlgorithm Functions Build'
        inputs:
          SourceFolder: 'Atlas.MatchingAlgorithm.Functions'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'matchingFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive MatchingAlgorithm Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/matchingFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/MatchingFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: MatchingAlgorithm Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/MatchingFunctions-$(Build.BuildId).zip'
          ArtifactName: functions
      - task: CopyFiles@2
        displayName: 'Copy DonorManagement Functions Build'
        inputs:
          SourceFolder: 'Atlas.MatchingAlgorithm.Functions.DonorManagement'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'matchingDonorFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive Matching Algorithm DonorManagement Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/matchingDonorFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/MatchingDonorFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: DonorManagement Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/MatchingDonorFunctions-$(Build.BuildId).zip'
          ArtifactName: functions
      - task: CopyFiles@2
        displayName: 'Copy MatchPrediction Functions Build'
        inputs:
          SourceFolder: 'Atlas.MatchPrediction.Functions'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'matchPredictionFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive MatchPrediction Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/matchPredictionFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/MatchPredictionFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: MatchPrediction Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/MatchPredictionFunctions-$(Build.BuildId).zip'
          ArtifactName: functions
          
      - task: CopyFiles@2
        displayName: 'Copy DonorImport Functions Build'
        inputs:
          SourceFolder: 'Atlas.DonorImport.Functions'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'donorImportFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive DonorImport Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/donorImportFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/DonorImportFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: DonorImport Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/DonorImportFunctions-$(Build.BuildId).zip'
          ArtifactName: functions
          

      - task: CopyFiles@2
        displayName: 'Copy RepeatSearch Functions Build'
        inputs:
          SourceFolder: 'Atlas.RepeatSearch.Functions'
          Contents: |
            bin/**
            *.config
          TargetFolder: 'repeatSearchFunctionsBuild'
      - task: ArchiveFiles@2
        displayName: 'Archive RepeatSearch Functions Build'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/repeatSearchFunctionsBuild/bin'
          includeRootFolder: false
          archiveFile: '$(Build.ArtifactStagingDirectory)/RepeatSearchFunctions-$(Build.BuildId).zip'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: RepeatSearch Functions'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/RepeatSearchFunctions-$(Build.BuildId).zip'
          ArtifactName: functions
          
      - task: DotNetCoreCLI@2
        displayName: 'Generate MatchingAlgorithm Persistent Migration'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations script  --output $(Build.ArtifactStagingDirectory)/SQL/SearchAlgorithmPersistentMigrationScript.sql --context SearchAlgorithmPersistentContext --idempotent --startup-project  $(System.DefaultWorkingDirectory)/Atlas.MatchingAlgorithm.Data.Persistent --project $(System.DefaultWorkingDirectory)/Atlas.MatchingAlgorithm.Data.Persistent/Atlas.MatchingAlgorithm.Data.Persistent.csproj --verbose'
      - task: DotNetCoreCLI@2
        displayName: 'Generate MatchingAlgorithm Transient Migration'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations script  --output $(Build.ArtifactStagingDirectory)/SQL/SearchAlgorithmTransientMigrationScript.sql --context SearchAlgorithmContext --idempotent --startup-project  $(System.DefaultWorkingDirectory)/Atlas.MatchingAlgorithm.Data --project $(System.DefaultWorkingDirectory)/Atlas.MatchingAlgorithm.Data'
      - task: DotNetCoreCLI@2
        displayName: 'Generate MatchPrediction Migration'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations script  --output $(Build.ArtifactStagingDirectory)/SQL/MatchPredictionMigrationScript.sql --context MatchPredictionContext --idempotent --startup-project  $(System.DefaultWorkingDirectory)/Atlas.MatchPrediction.Data --project $(System.DefaultWorkingDirectory)/Atlas.MatchPrediction.Data'
      - task: DotNetCoreCLI@2
        displayName: 'Generate Donor Migration'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations script  --output $(Build.ArtifactStagingDirectory)/SQL/DonorImportMigrationScript.sql --context DonorContext --idempotent --startup-project  $(System.DefaultWorkingDirectory)/Atlas.DonorImport.Data --project $(System.DefaultWorkingDirectory)/Atlas.DonorImport.Data'
      - task: DotNetCoreCLI@2
        displayName: 'Generate Repeat Search Migration'
        inputs:
          command: custom
          custom: ef
          arguments: 'migrations script  --output $(Build.ArtifactStagingDirectory)/SQL/RepeatSearchMigrationScript.sql --context RepeatSearchContext --idempotent --startup-project  $(System.DefaultWorkingDirectory)/Atlas.RepeatSearch.Data --project $(System.DefaultWorkingDirectory)/Atlas.RepeatSearch.Data'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: sql'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/SQL'
          ArtifactName: sql
  - job: Terraform_Core
    pool: 
      vmImage: 'ubuntu-latest'
    steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Use Terraform 1.3.6'
        inputs:
          terraformVersion: '1.3.6'
      - script: 'terraform init -reconfigure -backend-config="storage_account_name=$(BACKEND_STORAGE_ACCOUNT_NAME)" -backend-config="container_name=$(BACKEND_STORAGE_CONTAINER_NAME)" -backend-config="resource_group_name=$(BACKEND_RESOURCE_GROUP_NAME)"'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/core'
        displayName: 'terraform init'
        env:
          ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
      - script: |
          echo Validating the syntax

          terraform validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/core'
        displayName: 'terraform validate'
        env:
          ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      - bash: |
          echo Remove the .terraform directory before pushing

          rm -rf .terraform/
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/core'
        displayName: 'rm -rf .terraform/'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: terraform-core'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform/core'
          ArtifactName: 'terraform-atlas-core'
