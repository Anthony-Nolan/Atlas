using Microsoft.EntityFrameworkCore.Migrations;

namespace Atlas.DonorImport.Data.Migrations
{
    public partial class AddDonorIndex : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Hash",
                table: "Donors",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)",
                oldNullable: true);

            #region EFCore Issue 12911 workaround

            // When creating an "idempotent" migration script, EF adds these commands in such a way that breaks once the column name DonorId is renamed.
            // See https://github.com/dotnet/efcore/issues/12911 for description, and to track when EF fix this issue (est. Nov 2020)
            // The SQL being run was generated by running the commented out fluent migration commands, and wrapping the entire generated command in an "Execute" statement.

            // migrationBuilder.AlterColumn<string>(
            //     name: "DonorId",
            //     table: "Donors",
            //     maxLength: 64,
            //     nullable: true,
            //     oldClrType: typeof(int),
            //     oldType: "int");
            
            migrationBuilder.Sql(@"
EXECUTE('
DROP INDEX [IX_Donors_DonorId] ON [Donors];
    DECLARE @var5 sysname;
    SELECT @var5 = [d].[name]
    FROM [sys].[default_constraints] [d]
    INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
    WHERE ([d].[parent_object_id] = OBJECT_ID(N''[Donors]'') AND [c].[name] = N''DonorId'');
    IF @var5 IS NOT NULL EXEC(N''ALTER TABLE [Donors] DROP CONSTRAINT ['' + @var5 + ''];'');
    ALTER TABLE [Donors] ALTER COLUMN [DonorId] nvarchar(64) NULL;
    CREATE UNIQUE INDEX [IX_Donors_DonorId] ON [Donors] ([DonorId]) WHERE [DonorId] IS NOT NULL;
')");
            
            // migrationBuilder.CreateIndex(
            //     name: "IX_Donors_DonorId",
            //     table: "Donors",
            //     column: "DonorId",
            //     unique: true,
            //     filter: "[DonorId] IS NOT NULL");
            
            migrationBuilder.Sql("EXECUTE('CREATE UNIQUE INDEX [IX_Donors_DonorId] ON [Donors] ([DonorId]) WHERE [DonorId] IS NOT NULL;')");

            #endregion

            migrationBuilder.CreateIndex(
                name: "IX_Donors_Hash",
                table: "Donors",
                column: "Hash");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Donors_DonorId",
                table: "Donors");

            migrationBuilder.DropIndex(
                name: "IX_Donors_Hash",
                table: "Donors");

            migrationBuilder.AlterColumn<string>(
                name: "Hash",
                table: "Donors",
                type: "nvarchar(max)",
                nullable: true,
                oldClrType: typeof(string),
                oldNullable: true);

            migrationBuilder.AlterColumn<int>(
                name: "DonorId",
                table: "Donors",
                type: "int",
                nullable: false,
                oldClrType: typeof(string),
                oldMaxLength: 64,
                oldNullable: true);
        }
    }
}