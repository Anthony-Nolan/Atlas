node('windows') {
    def projectName = "Nova.SearchAlgorithm.Test.Validation"
    def solutionName = "Nova.SearchAlgorithm"
    def projectFile = ".\\${projectName}\\${projectName}.csproj"
    def solutionFile = "${solutionName}.sln"

    def msBuildPath;
    def msBuild;
    def nunitRunner;
    def specFlowRunner;
    def picklesRunner;
    def migrate;

    stage('Checkout') {
        checkout scm
    }
    
    // This must be done before the build step, or else the validation tests build will fail
    stage('Prepare Validation Test Config') {
        configFileProvider([configFile(fileId: 'Search Algorithm Validation Tests Settings', targetLocation: 'Nova.SearchAlgorithm.Test.Validation/Settings/SecureSettings.config')]) {}
        configFileProvider([configFile(fileId: 'Search Algorithm Validation Tests Connection Strings', targetLocation: 'Nova.SearchAlgorithm.Test.Validation/Settings/ConnectionStrings.config')]) {}
    }
    
    stage('Prepare Nuget') {
        withCredentials([usernamePassword(credentialsId: env.NUGET_CREDENTIALS_ID, passwordVariable: 'password', usernameVariable: 'username')]) {
            bat "init.cmd"
            bat ".tools\\nuget.exe sources update -ConfigFile nuget.config -name Nova -source \"${env.NUGET_SOURCE_URL}\" -username ${username} -password ${password}"
        }
    }
    stage('Resolve dependencies') {
        msBuildPath = tool('MSBuild');
        msBuild = "\"${msBuildPath}\\MSBuild.exe\""
        bat ".tools\\nuget restore ${solutionFile} -MSBuildPath \"${msBuildPath}\" -ConfigFile nuget.config"
    }
    stage('Verify tools') {
        nunitRunner = findNunitRunner()
        specFlowRunner = findSpecFlowRunner()
        picklesRunner = findPicklesRunner()
        migrate = findMigrate()
    }
    stage('Clean') {
        bat "if exist build del build /Q"
        bat "${msBuild} ${solutionFile} /t:Clean /v:minimal"
    }
    stage('Build for tests and migrations') {
        bat "${msBuild} ${solutionFile} /p:Configuration=Debug /v:minimal"
    }
    stage('Run Validation Tests') {
        // Specflow assumes this as the default test result name. It's theoretically overridable with a parameter, but when passing in the parameter we get errors
        def testOutput = 'TestResult.xml'

        // Get a list of all of the test assembly paths
        def testAssemblies = findFilePaths('**/bin/Debug/Nova.*.Test.Validation.dll')

        //Run the tests
        bat "${nunitRunner} ${testAssemblies.join(' ')} --out=TestReport.txt --result=${testOutput};format=nunit2 --noheader"

        // Generate reports
        bat "${specFlowRunner} nunitexecutionreport ${projectFile}"
        bat "${picklesRunner} --feature-directory=./ValidationTests/Features --output-directory=./documentation --link-results-file=./${testOutput}"
    }
}

def findNunitRunner() {
    // Version-agnostic way of finding the nunit runner
    return findSingleFile('packages/NUnit.ConsoleRunner.*/tools/nunit3-console.exe')
}

def findSpecFlowRunner() {
    // Version-agnostic way of finding the specflow runner
    return findSingleFile('packages/SpecFlow.*/tools/specflow.exe')
}

def findPicklesRunner() {
    // Version-agnostic way of finding the pickles runner
    return findSingleFile('packages/Pickles.CommandLine.2.19.0/tools/pickles.exe')
}

def findMigrate() {
    // Version-agnostic way of finding the migrate tool
    return findSingleFile('packages/EntityFramework.*/tools/migrate.exe')
}

def findSingleFile(String glob) {
    def files = findFilePaths(glob)
    if (files.size() == 0) {
        error("Cannot find file for pattern ${glob}")
    }
    if (files.size() > 1) {
        error("Found multiple files: ${files.join(', ')}")
    }
    return files[0]
}

def findFilePaths(String glob) {
    return findFiles(glob: glob).collect { "\"${env.WORKSPACE}/$it.path\"" }
}
